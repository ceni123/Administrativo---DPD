// index.js ‚Äî BOT DPD com hierarquias autom√°ticas
const {
  Client,
  GatewayIntentBits,
  Collection,
  Events,
  REST,
  Routes,
  EmbedBuilder,
} = require('discord.js');

// ======= 1) CLIENT =======
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers, // Necess√°rio para ler cargos
  ],
});

client.commands = new Collection();

// ======= 2) IMPORTA O COMANDO /hierarquia =======
const hierarquia = require('./commands/hierarquia.js');
client.commands.set(hierarquia.data.name, hierarquia);

// ======= 3) REGISTRA O COMANDO =======
client.once(Events.ClientReady, async (c) => {
  console.log(`‚úÖ Bot conectado como ${c.user.tag}`);

  const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);
  const commandsJson = [hierarquia.data.toJSON()];

  try {
    await rest.put(
      Routes.applicationGuildCommands(process.env.APP_ID, process.env.GUILD_ID),
      { body: commandsJson }
    );
    console.log('‚úÖ /hierarquia registrado com sucesso.');
  } catch (err) {
    console.error('‚ùå Erro ao registrar comandos:', err);
  }
});

// ======= 4) FUN√á√ÉO: GERAR HIERARQUIA AUTOM√ÅTICA =======
async function gerarHierarquia(guild, unidade) {
  const divisaoCargos = {
    FAST: [
      'Supervisor Fast ‚ö°',
      'Manager FAST ‚ö°',
      '(FAST) Sub-Manager ‚ö°',
      '(FAST) Counselor ‚ö°',
      '(FAST) Elite Pilot ‚ö°',
      '(FAST) Veteran Pilot ‚ö°',
      '(FAST) Official Pilot ‚ö°',
      '(FAST) Probationary Pilot ‚ö°',
      '(FAST) Co-Pilot ‚ö°',
    ],
    SWAT: [
      '(S.W.A.T) Supervisor ‚ò†Ô∏è',
      '(S.W.A.T) Gestor ‚ò†Ô∏è',
      '(S.W.A.T) Coordenador ‚ò†Ô∏è',
      '(S.W.A.T) Instrutor ‚ò†Ô∏è',
      '(S.W.A.T) Operador ‚ò†Ô∏è',
      '(S.W.A.T) Probatorio ‚ò†Ô∏è',
    ],
    DAF: [
      'Supervisor D.A.F. üèÖ',
      'Manager D.A.F. üèÖ',
      '(DAF) Crew Chief üèÖ',
      '(DAF) Captain üèÖ',
      '(DAF) Lead Pilot üèÖ',
      '(DAF) Senior Pilot üèÖ',
      '(DAF) Officer Pilot üèÖ',
      '(DAF) Cadet Pilot üèÖ',
    ],
    DAF_SHOOTERS: [
      '(DAF) Shooter Captain üèÖ',
      '(DAF) Lead Shooter üèÖ',
      '(DAF) Senior Shooter üèÖ',
      '(DAF) Officer Shooter üèÖ',
      '(DAF) Cadet Shooter üèÖ',
    ],
    MARY: [
      'Supervisor MARY üèçÔ∏è',
      'Manager MARY üèçÔ∏è',
      '(MARY) Sub-Manager üèçÔ∏è',
      '(MARY) Conselheiro üèçÔ∏è',
      '(MARY) Bra√ßo Direito üèçÔ∏è',
      '(MARY) Piloto Elite üèçÔ∏è',
      '(MARY) Piloto Veterano üèçÔ∏è',
      '(MARY) Piloto Oficial üèçÔ∏è',
      '(MARY) Piloto Probatorio üèçÔ∏è',
    ],
    DETECTIVE: [
      'Supervisor Detective Unit üîç',
      'Manager Detective Unit üîç',
      '(D.U.) Detective-Lieutenant üîç',
      '(D.U.) Detective III üîç',
      '(D.U.) Detective II üîç',
      '(D.U.) Detective I üîç',
      '(D.U.) Prob. Detective üîç',
    ],
    COT: [
      '(COT) Director',
      '(COT) Chief Officer',
      '(COT) Supervisor',
      '(COT) Agent',
    ],
    INTERNAL: [
      'Supervisor Internal investigation ‚öñÔ∏è',
      'Manager Internal investigation ‚öñÔ∏è',
      '(I.N.V) Counselor ‚öñÔ∏è',
      '(I.N.V) Senior ‚öñÔ∏è',
      '(I.N.V) Official ‚öñÔ∏è',
      '(I.N.V) Cadet ‚öñÔ∏è',
      '(I.N.V) Probationary ‚öñÔ∏è',
    ],
  };

  const cargos = divisaoCargos[unidade.toUpperCase()];
  if (!cargos) return null;

  let descricao = '';

  for (const nomeCargo of cargos) {
    const cargo = guild.roles.cache.find(r => r.name === nomeCargo);
    if (!cargo) {
      descricao += `**${nomeCargo}:**\n_Cargo n√£o encontrado_\n\n`;
      continue;
    }

    const membros = cargo.members.map(m => `${m.user}`).join('\n');
    descricao += `**${nomeCargo}:**\n${membros || '_Vazio_'}\n\n`;
  }

  const cores = {
    FAST: '#ff0000',
    SWAT: '#000000',
    DAF: '#007bff',
    DAF_SHOOTERS: '#004080',
    MARY: '#8000ff',
    DETECTIVE: '#800080',
    COT: '#ffcc00',
    INTERNAL: '#ff6600',
  };

  const embed = new EmbedBuilder()
    .setColor(cores[unidade.toUpperCase()] || '#003366')
    .setTitle(`üìã Hierarquia - ${unidade}`)
    .setDescription(descricao)
    .setFooter({ text: 'Departamento de Pol√≠cia de Detroit' })
    .setTimestamp();

  return embed;
}

// ======= 5) INTERA√á√ïES =======
client.on(Events.InteractionCreate, async (interaction) => {
  if (interaction.isChatInputCommand()) {
    const command = client.commands.get(interaction.commandName);
    if (!command) return;
    try {
      await command.execute(interaction);
    } catch (err) {
      console.error(err);
      if (interaction.deferred || interaction.replied) {
        await interaction.followUp({ content: '‚ùå Erro ao executar o comando.', ephemeral: true });
      } else {
        await interaction.reply({ content: '‚ùå Erro ao executar o comando.', ephemeral: true });
      }
    }
    return;
  }

  if (interaction.isStringSelectMenu() && interaction.customId === 'unidade_select') {
    await interaction.deferUpdate();
    const unidade = interaction.values[0];
    const embed = await gerarHierarquia(interaction.guild, unidade);

    if (!embed) {
      await interaction.channel.send('‚ùå Unidade n√£o encontrada.');
      return;
    }

    await interaction.channel.send({ embeds: [embed] });
  }
});

// ======= 6) LOGIN =======
client.login(process.env.BOT_TOKEN);
