// index.js ‚Äî vers√£o completa com registro autom√°tico do /hierarquia
const {
  Client,
  GatewayIntentBits,
  Collection,
  Events,
  REST,
  Routes,
  EmbedBuilder,
} = require('discord.js');

// ======= 1) CLIENT =======
const client = new Client({
  intents: [GatewayIntentBits.Guilds], // para slash commands basta Guilds
});

// Mapeamento de comandos
client.commands = new Collection();

// ======= 2) IMPORTA O COMANDO /hierarquia =======
const hierarquia = require('./commands/hierarquia.js');
client.commands.set(hierarquia.data.name, hierarquia);

// ======= 3) REGISTRA OS SLASH COMMANDS AO INICIAR =======
client.once(Events.ClientReady, async (c) => {
  console.log(`‚úÖ Bot conectado como ${c.user.tag}`);

  const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);
  const commandsJson = [hierarquia.data.toJSON()];

  try {
    // Registro r√°pido NA GUILD (aparece em segundos)
    await rest.put(
      Routes.applicationGuildCommands(process.env.APP_ID, process.env.GUILD_ID),
      { body: commandsJson }
    );
    console.log('‚úÖ /hierarquia registrado na guild com sucesso.');
  } catch (err) {
    console.error('‚ùå Erro ao registrar comandos:', err);
  }
});

// ======= 4) TRATA INTERA√á√ïES =======
client.on(Events.InteractionCreate, async (interaction) => {
  // 4.a) Slash commands (ex: /hierarquia)
  if (interaction.isChatInputCommand()) {
    const command = client.commands.get(interaction.commandName);
    if (!command) return;
    try {
      await command.execute(interaction); // Executa o commands/hierarquia.js
    } catch (err) {
      console.error(err);
      if (interaction.deferred || interaction.replied) {
        await interaction.followUp({ content: '‚ùå Erro ao executar o comando.', ephemeral: true });
      } else {
        await interaction.reply({ content: '‚ùå Erro ao executar o comando.', ephemeral: true });
      }
    }
    return;
  }

  // 4.b) Select menu do /hierarquia
  if (interaction.isStringSelectMenu() && interaction.customId === 'unidade_select') {
    const escolha = interaction.values[0];

    const embed = new EmbedBuilder()
      .setColor(0x003366)
      .setTitle('üìã Hierarquia DPD - ' + escolha.toUpperCase())
      .setFooter({ text: 'Departamento de Pol√≠cia de Detroit' })
      .setTimestamp();

    switch (escolha) {
      case 'detective':
        embed.setDescription(`üëÆ‚Äç‚ôÇÔ∏è **Detective Unit**
> ‚Ä¢ Chefe de Investiga√ß√µes  
> ‚Ä¢ Detetive S√™nior  
> ‚Ä¢ Detetive  
> ‚Ä¢ Investigador  
> ‚Ä¢ Estagi√°rio Forense`);
        break;
      case 'swat':
        embed.setDescription(`üí• **SWAT**
> ‚Ä¢ Comandante SWAT  
> ‚Ä¢ Capit√£o T√°tico  
> ‚Ä¢ Operador de Elite  
> ‚Ä¢ Operador  
> ‚Ä¢ Recruta T√°tico`);
        break;
      case 'fast':
        embed.setDescription(`üöì **FAST**
> ‚Ä¢ Comandante FAST  
> ‚Ä¢ Supervisor  
> ‚Ä¢ Agente S√™nior  
> ‚Ä¢ Agente  
> ‚Ä¢ Recruta FAST`);
        break;
      case 'daf':
        embed.setDescription(`üéØ **DAF**
> ‚Ä¢ Diretor DAF  
> ‚Ä¢ Agente Fiscalizador  
> ‚Ä¢ Inspetor  
> ‚Ä¢ Analista  
> ‚Ä¢ Estagi√°rio DAF`);
        break;
      case 'mary':
        embed.setDescription(`üö® **MARY**
> ‚Ä¢ Supervisor MARY  
> ‚Ä¢ Policial S√™nior  
> ‚Ä¢ Policial  
> ‚Ä¢ Recruta`);
        break;
      case 'dafatiradores':
        embed.setDescription(`üéØ **DAF Atiradores**
> ‚Ä¢ L√≠der de Snipers  
> ‚Ä¢ Sniper Especialista  
> ‚Ä¢ Atirador  
> ‚Ä¢ Estagi√°rio de Tiro`);
        break;
      case 'internal':
        embed.setDescription(`üïµÔ∏è **Internal Investigation (Corregedoria)**
> ‚Ä¢ Chefe da Corregedoria  
> ‚Ä¢ Corregedor S√™nior  
> ‚Ä¢ Corregedor  
> ‚Ä¢ Analista Disciplinar  
> ‚Ä¢ Estagi√°rio Interno`);
        break;
      default:
        embed.setDescription('‚ùå Unidade n√£o encontrada.');
    }

    await interaction.reply({ embeds: [embed], ephemeral: true });
  }
});

// ======= 5) LOGIN =======
client.login(process.env.BOT_TOKEN);
